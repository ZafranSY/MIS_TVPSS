-- Drop the database if it already exists
DROP DATABASE IF EXISTS TVPSS_System;

-- Create the database
CREATE DATABASE TVPSS_System;
USE TVPSS_System;

-- 1. UserRoles Table
CREATE TABLE UserRoles (
    RoleID INT PRIMARY KEY,
    RoleName VARCHAR(50) NOT NULL
);

-- Insert predefined roles into UserRoles
INSERT INTO UserRoles (RoleID, RoleName)
VALUES
(1, 'Superadmin'),
(2, 'School Admin'),
(3, 'Teacher'),
(4, 'Student');

-- 2. User Table
CREATE TABLE User (
    UserID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(255) NOT NULL,
    Email VARCHAR(255) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL,
    Role INT NOT NULL,
    Status VARCHAR(50) NOT NULL DEFAULT 'active',
    CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt DATETIME ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (Role) REFERENCES UserRoles(RoleID)
);

-- 3. SchoolAdmin Table
CREATE TABLE SchoolAdmin (
    AdminSchoolID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT NOT NULL UNIQUE, -- Ensure each admin is associated with one school
    SchoolName VARCHAR(255) NOT NULL,
    Address VARCHAR(255),
    FOREIGN KEY (UserID) REFERENCES User(UserID) ON DELETE CASCADE
);

-- 4. Crew Table
CREATE TABLE Crew (
    CrewID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT UNIQUE NOT NULL,
    Role VARCHAR(255) NOT NULL,
    ApplicationStatus ENUM('Pending', 'Approved', 'Rejected') NOT NULL,
    SchoolName VARCHAR(255),
    Address VARCHAR(255),
    Picture BLOB,
    ICNumber VARCHAR(20),
    ReasonToJoin TEXT,
    AdminSchoolID INT NOT NULL,
    FOREIGN KEY (UserID) REFERENCES User(UserID) ON DELETE CASCADE,
    FOREIGN KEY (AdminSchoolID) REFERENCES SchoolAdmin(AdminSchoolID) ON DELETE CASCADE
);

-- 5. CrewTask Table
CREATE TABLE CrewTask (
    TaskID INT AUTO_INCREMENT PRIMARY KEY,
    CrewID INT NOT NULL,
    TaskTitle VARCHAR(255) NOT NULL,
    TaskDescription TEXT,
    TaskDueDate DATE,
    TaskStatus VARCHAR(50) DEFAULT 'Pending',
    IsOverdue BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (CrewID) REFERENCES Crew(CrewID) ON DELETE CASCADE
);

-- 6. Studio Table
CREATE TABLE Studio (
    StudioID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(255) NOT NULL,
    Location VARCHAR(255) NOT NULL,
    Status ENUM('Available', 'Unavailable') NOT NULL
);

-- 7. Equipment Table
CREATE TABLE Equipment (
    EquipmentID INT AUTO_INCREMENT PRIMARY KEY,
    StudioID INT NOT NULL,
    Name VARCHAR(255) NOT NULL,
    Type VARCHAR(255) NOT NULL,
    Status ENUM('Functional', 'Needs Maintenance') NOT NULL,
    FOREIGN KEY (StudioID) REFERENCES Studio(StudioID) ON DELETE CASCADE
);

-- 8. Program Table
CREATE TABLE Program (
    ProgramID INT AUTO_INCREMENT PRIMARY KEY,
    TeacherID INT NOT NULL,
    Title VARCHAR(255) NOT NULL,
    Description TEXT,
    StartDate DATE,
    EndDate DATE,
    FOREIGN KEY (TeacherID) REFERENCES User(UserID) ON DELETE CASCADE
);

-- 9. ProgramReport Table
CREATE TABLE ProgramReport (
    ReportID INT AUTO_INCREMENT PRIMARY KEY,
    ProgramID INT NOT NULL,
    Summary TEXT,
    Metrics TEXT,
    FOREIGN KEY (ProgramID) REFERENCES Program(ProgramID) ON DELETE CASCADE
);

-- 10. Content Table
CREATE TABLE Content (
    ContentID INT AUTO_INCREMENT PRIMARY KEY,
    ProgramID INT NOT NULL,
    Title VARCHAR(255) NOT NULL,
    Description TEXT,
    URL VARCHAR(255) NOT NULL,
    UploadDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ProgramID) REFERENCES Program(ProgramID) ON DELETE CASCADE
);

-- 11. Analytics Table
CREATE TABLE Analytics (
    AnalyticsID INT AUTO_INCREMENT PRIMARY KEY,
    ContentID INT NOT NULL,
    Views INT DEFAULT 0,
    Likes INT DEFAULT 0,
    Comments INT DEFAULT 0,
    EngagementRate FLOAT,
    FOREIGN KEY (ContentID) REFERENCES Content(ContentID) ON DELETE CASCADE
);

-- 12. AuditLog Table
CREATE TABLE AuditLog (
    LogID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT NOT NULL,
    Action VARCHAR(255) NOT NULL,
    ActionDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES User(UserID) ON DELETE CASCADE
);
