-- Drop the database if it already exists
DROP DATABASE IF EXISTS TVPSS_System;

-- Create the database
CREATE DATABASE TVPSS_System;
USE TVPSS_System;

-- 1. UserRoles Table
CREATE TABLE UserRoles (
    RoleID INT PRIMARY KEY,
    RoleName VARCHAR(50) NOT NULL
);

-- Insert predefined roles into UserRoles
INSERT INTO UserRoles (RoleID, RoleName)
VALUES
(1, 'Superadmin'),
(2, 'School Admin'),
(3, 'Teacher'),
(4, 'Student');

-- 2. User Table
CREATE TABLE User (
    UserID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(255) NOT NULL,
    Email VARCHAR(255) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL,
    Role INT NOT NULL,
    Status VARCHAR(50) NOT NULL DEFAULT 'active',
    CreatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    UpdatedAt DATETIME ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (Role) REFERENCES UserRoles(RoleID)
);

-- 3. Crew Table (One-to-One Relationship with User)
CREATE TABLE Crew (
    CrewID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT UNIQUE NOT NULL,
    Role VARCHAR(255) NOT NULL,
    ApplicationStatus ENUM('Pending', 'Approved', 'Rejected') NOT NULL,
    FOREIGN KEY (UserID) REFERENCES User(UserID) ON DELETE CASCADE
);

-- 4. Studio Table
CREATE TABLE Studio (
    StudioID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(255) NOT NULL,
    Location VARCHAR(255) NOT NULL,
    Status ENUM('Available', 'Unavailable') NOT NULL
);

-- 5. Equipment Table
CREATE TABLE Equipment (
    EquipmentID INT AUTO_INCREMENT PRIMARY KEY,
    StudioID INT NOT NULL,
    Name VARCHAR(255) NOT NULL,
    Type VARCHAR(255) NOT NULL,
    Status ENUM('Functional', 'Needs Maintenance') NOT NULL,
    FOREIGN KEY (StudioID) REFERENCES Studio(StudioID) ON DELETE CASCADE
);

-- 6. Program Table (Managed by Teachers Only)
CREATE TABLE Program (
    ProgramID INT AUTO_INCREMENT PRIMARY KEY,
    TeacherID INT NOT NULL,
    Title VARCHAR(255) NOT NULL,
    Description TEXT,
    StartDate DATE,
    EndDate DATE,
    FOREIGN KEY (TeacherID) REFERENCES User(UserID) ON DELETE CASCADE
);

-- 7. Program Report Table
CREATE TABLE ProgramReport (
    ReportID INT AUTO_INCREMENT PRIMARY KEY,
    ProgramID INT NOT NULL,
    Summary TEXT,
    Metrics TEXT,
    FOREIGN KEY (ProgramID) REFERENCES Program(ProgramID) ON DELETE CASCADE
);

-- 8. Content Table
CREATE TABLE Content (
    ContentID INT AUTO_INCREMENT PRIMARY KEY,
    ProgramID INT NOT NULL,
    Title VARCHAR(255) NOT NULL,
    Description TEXT,
    URL VARCHAR(255) NOT NULL,
    UploadDate DATETIME,
    FOREIGN KEY (ProgramID) REFERENCES Program(ProgramID) ON DELETE CASCADE
);

-- 9. Analytics Table
CREATE TABLE Analytics (
    AnalyticsID INT AUTO_INCREMENT PRIMARY KEY,
    ContentID INT NOT NULL,
    Views INT DEFAULT 0,
    Likes INT DEFAULT 0,
    Comments INT DEFAULT 0,
    EngagementRate FLOAT,
    FOREIGN KEY (ContentID) REFERENCES Content(ContentID) ON DELETE CASCADE
);

-- 10. AuditLog Table (For Logging Actions)
CREATE TABLE AuditLog (
    LogID INT AUTO_INCREMENT PRIMARY KEY,
    UserID INT NOT NULL,
    Action VARCHAR(255) NOT NULL,
    ActionDate DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES User(UserID) ON DELETE CASCADE
);
-- Add District Table (PPD)
CREATE TABLE District (
    DistrictID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(255) NOT NULL
);

-- Add School Table
CREATE TABLE School (
    SchoolID INT AUTO_INCREMENT PRIMARY KEY,
    DistrictID INT NOT NULL,
    Name VARCHAR(255) NOT NULL,
    Address VARCHAR(255),
    FOREIGN KEY (DistrictID) REFERENCES District(DistrictID) ON DELETE CASCADE
);

-- Add SchoolID to User Table
ALTER TABLE User ADD COLUMN SchoolID INT;
ALTER TABLE User ADD FOREIGN KEY (SchoolID) REFERENCES School(SchoolID) ON DELETE SET NULL;

-- Sample Data Insertion

-- Insert Users
INSERT INTO User (Name, Email, Password, Role)
VALUES 
('Alice Admin', 'alice.admin@example.com', 'password123', 1),
('Bob SchoolAdmin', 'bob.admin@example.com', 'password123', 2),
('Charlie Teacher', 'charlie.teacher@example.com', 'password123', 3),
('David Student', 'david.student@example.com', 'password123', 4);

-- Assign a Crew Role to a Student
INSERT INTO Crew (UserID, Role, ApplicationStatus)
VALUES 
(4, 'Host', 'Approved');

-- Insert Studio
INSERT INTO Studio (Name, Location, Status)
VALUES 
('Main Studio', 'Building A', 'Available'),
('Secondary Studio', 'Building B', 'Unavailable');

-- Insert Equipment
INSERT INTO Equipment (StudioID, Name, Type, Status)
VALUES 
(1, 'Camera', 'Video', 'Functional'),
(1, 'Microphone', 'Audio', 'Functional'),
(2, 'Lighting Kit', 'Accessory', 'Needs Maintenance');

-- Insert Programs (Managed by Teachers Only)
INSERT INTO Program (TeacherID, Title, Description, StartDate, EndDate)
VALUES 
(3, 'Media Workshop', 'A workshop for student journalists.', '2025-01-10', '2025-01-12'),
(3, 'Film Production', 'A program for producing short films.', '2025-01-15', '2025-01-20');

-- Insert Program Reports
INSERT INTO ProgramReport (ProgramID, Summary, Metrics)
VALUES 
(1, 'The workshop was attended by 50 students.', 'Engagement: High, Feedback: Positive');

-- Insert Content
INSERT INTO Content (ProgramID, Title, Description, URL, UploadDate)
VALUES 
(1, 'Workshop Recap Video', 'A video summarizing the workshop activities.', 'http://example.com/workshop-video', NOW());

-- Insert Analytics
INSERT INTO Analytics (ContentID, Views, Likes, Comments, EngagementRate)
VALUES 
(1, 500, 300, 50, 85.5);

-- Insert Audit Logs
INSERT INTO AuditLog (UserID, Action)
VALUES 
(3, 'Created Program: Media Workshop');

-- Insert Districts
INSERT INTO District (Name) VALUES ('District A'), ('District B');

-- Insert Schools
INSERT INTO School (DistrictID, Name, Address)
VALUES
(1, 'High School A', '123 Main St'),
(2, 'High School B', '456 Elm St');

-- Update User Table with School Information
UPDATE User
SET SchoolID = 1
WHERE Name = 'Bob SchoolAdmin';

